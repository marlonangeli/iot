name: iot-development

services:
  logi-api:
    container_name: logi-api-dev
    build:
      context: ../logi-api/
      dockerfile: Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
        NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    env_file:
      - development.env
    environment:
      SPRING_PROFILES_ACTIVE: development
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  event-api:
    container_name: event-api-dev
    build:
      context: ../event-api/
      dockerfile: Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
    env_file:
      - development.env
    environment:
      NODE_ENV: development
      NEW_RELIC_APP_NAME: "event-api (dev)"
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  auth:
    container_name: auth-dev
    build:
      context: ../auth/
      dockerfile: Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
    env_file:
      - .env
    environment:
      GIN_MODE: release
    ports:
      - "5000:5000"

  postgres:
    container_name: iot-postgres
    image: postgres:15.6
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    container_name: iot-mongodb
    image: mongo:8.0.3
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      DB_NAME: ${MONGO_DATABASE}
      DB_USER: ${MONGO_USER}
      DB_PASSWORD: ${MONGO_PASSWORD}
      DB_PORT: ${MONGO_PORT}
    volumes:
      - mongodb-data:/data/db
      - ./mongo-entrypoint.sh:/docker-entrypoint-initdb.d/mongo-entrypoint.sh:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@localhost:27017/?authSource=admin --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    container_name: iot-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmqctl node_health_check
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
    name: iot-postgres-data
  mongodb-data:
    name: iot-mongodb-data
  rabbitmq-data:
    name: iot-rabbitmq-data

networks:
  default:
    name: iot-development-network
